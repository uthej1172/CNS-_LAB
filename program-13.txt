import numpy as np

# Known plaintext and ciphertext (aligned blocks of 4 letters)
plaintext = "HELP"
ciphertext = "ZEBB"

# Convert to numbers: A=0, ..., Z=25
P = [ord(c) - 65 for c in plaintext]
C = [ord(c) - 65 for c in ciphertext]

# Form matrices (2×2)
P_matrix = np.array([[P[0], P[1]], [P[2], P[3]]]) % 26
C_matrix = np.array([[C[0], C[1]], [C[2], C[3]]]) % 26

# Compute modular inverse of P_matrix
det = int(np.round(np.linalg.det(P_matrix))) % 26
det_inv = pow(det, -1, 26)  # modular inverse of determinant

adjugate = np.array([[P_matrix[1,1], -P_matrix[0,1]],
                     [-P_matrix[1,0], P_matrix[0,0]]]) % 26
P_inv = (det_inv * adjugate) % 26

# Solve for key matrix: K = C × P⁻¹ mod 26
K = np.dot(C_matrix, P_inv) % 26
print("Recovered Key Matrix:\n", K)
