from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
import os

# 1. Block size (DES = 64 bits = 8 bytes)
BLOCK_SIZE = 8

# 2. Custom padding: add 0x80 (10000000) followed by 0x00 bytes
def pad(data):
    pad_len = BLOCK_SIZE - (len(data) % BLOCK_SIZE)
    return data + b'\x80' + b'\x00' * (pad_len - 1)

# 3. Plaintext (multiple of block size or not)
plaintext = b"ENCRYPTIONMODES"

# 4. Apply padding
padded = pad(plaintext)

# 5. Random 3DES key (24 bytes) and IV (8 bytes)
key = os.urandom(24)
iv = os.urandom(8)

# 6. ECB mode
cipher_ecb = Cipher(algorithms.TripleDES(key), modes.ECB())
ct_ecb = cipher_ecb.encryptor().update(padded)

# 7. CBC mode
cipher_cbc = Cipher(algorithms.TripleDES(key), modes.CBC(iv))
ct_cbc = cipher_cbc.encryptor().update(padded)

# 8. CFB mode
cipher_cfb = Cipher(algorithms.TripleDES(key), modes.CFB(iv))
ct_cfb = cipher_cfb.encryptor().update(padded)

# 9. Display ciphertexts
print("ECB Ciphertext :", ct_ecb.hex())
print("CBC Ciphertext :", ct_cbc.hex())
print("CFB Ciphertext :", ct_cfb.hex())
