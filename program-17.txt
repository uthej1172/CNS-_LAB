# 64-bit binary ciphertext (example)
ciphertext = "1100101011110001101000101110110010111010001101010010110111101001"

# 48-bit round keys K1 to K16 (dummy data for demonstration)
keys = [
    "000110110000001011101111111111000111000001110010",
    "011110011010111011011001110110111100100111100101",
    "010101011111110010001010010000101100111110011001",
    "011100101010110111010110110110110011010100011101",
    "011111001110110000000111111010110101001110101000",
    "011000111010010100111110010100000111101100101111",
    "111011001000010010110111111101100001100010111100",
    "111101111000101000111010110000010011101111111011",
    "111000001101101111101011111011011110011110000001",
    "101100011111001101000111101110100100011001001111",
    "001000010101111111010011110111101101001110000110",
    "011101010111000111110101100101000110011111101001",
    "100101111100010111010001111110101011101001000001",
    "010111110100001110110111111100101110011100111010",
    "101111111001000110001101001111010011111100001010",
    "110010110011110110001011000011100001011111110101"
]

# Fill with dummy keys if fewer than 16 (just in case)
while len(keys) < 16:
    keys.append("0" * 48)

# Reverse keys for decryption
keys = keys[::-1]

# Dummy initial permutation (just use identity permutation for simplicity)
IP = [i for i in range(64)]

# Apply initial permutation
permuted = ""
for i in IP:
    permuted += ciphertext[i]

# Split into L and R halves
L = permuted[:32]
R = permuted[32:]

# Perform 16 Feistel rounds
for rnd in range(16):
    key = keys[rnd]

    # Simplified expansion and XOR (pretend R is already 48 bits)
    expanded_R = R * (48 // len(R)) + R[:48 % len(R)]  # Fake expansion to 48 bits
    xor_result = ""
    for i in range(48):
        xor_result += str(int(expanded_R[i]) ^ int(key[i]))

    # Dummy F function output (use first 32 bits)
    F_output = xor_result[:32]

    # Feistel swap
    new_R = ""
    for i in range(32):
        new_R += str(int(L[i]) ^ int(F_output[i]))
    L = R
    R = new_R

# Combine R and L (note the swap after last round)
pre_output = R + L

# Dummy final permutation (identity)
FP = [i for i in range(64)]
decrypted = ""
for i in FP:
    decrypted += pre_output[i]

print("Decrypted binary output:")
print(decrypted)
